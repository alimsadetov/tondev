import { AbiModule, BocModule, ClientConfig, ClientModule, CryptoModule, NetModule, ProcessingModule, TvmModule, UtilsModule } from "./modules";
import { BinaryLibrary, ResponseHandler } from "./bin";
import { TonClientError } from "./errors";
export declare class TonClient {
    private static _defaultConfig;
    private static _default;
    static set default(client: TonClient);
    static get default(): TonClient;
    static set defaultConfig(config: ClientConfig);
    static get defaultConfig(): ClientConfig;
    readonly client: ClientModule;
    readonly crypto: CryptoModule;
    readonly abi: AbiModule;
    readonly boc: BocModule;
    readonly processing: ProcessingModule;
    readonly utils: UtilsModule;
    readonly net: NetModule;
    readonly tvm: TvmModule;
    private readonly config;
    private context;
    constructor(config?: ClientConfig);
    static useBinaryLibrary(loader: () => Promise<BinaryLibrary>): void;
    static toKey(d: string): string;
    static toHash64(d: string): string;
    static toHash128(d: string): string;
    static toHash256(d: string): string;
    static toHash512(d: string): string;
    static toHex(dec: string, bits?: number): string;
    close(): void;
    resolveError(functionName: string, params: any, err: TonClientError): Promise<TonClientError>;
    request(functionName: string, functionParams: any, responseHandler?: ResponseHandler): Promise<any>;
    resolve_app_request(app_request_id: number | null, result: any): Promise<void>;
    reject_app_request(app_request_id: number | null, error: any): Promise<void>;
}
//# sourceMappingURL=client.d.ts.map